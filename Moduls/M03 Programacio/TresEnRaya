import java.util.Scanner;

public class TresEnRaya {
    static Scanner teclado = new Scanner(System.in);
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";
    public static final String ANSI_RESET = "\u001B[0m";

    public static void main(String[] args) throws Exception {
        int numero = 3;
        char jugadorActual = 'X';
        char nada = '-';
        int continuar = 0;

        System.out.println("#############################################################################" +
                "#########################################################################################");
        new ASCIIArtGenerator("BENVINGUT AL JOC " + numero + " EN RATLLA", "|");
        System.out.println("#############################################################################" +
                "#########################################################################################");

        System.out.println(ANSI_CYAN + "L'objectiu d'aquest joc,\nés aconseguir posar tres fitxes en línia horitzontal, vertical o diagonal abans que l'adversari ho faci." + ANSI_RESET);
        System.out.println(ANSI_CYAN + "Bona sort, i que la força t'acompanyi!!" + ANSI_RESET);

        do {
            System.out.println(ANSI_YELLOW + "\nSi vols començar una partida tecleja 1, sino vols crear una partida tecleja 0 i sortiras del joc." + ANSI_RESET);
            continuar = teclado.nextInt();
            if (continuar == 0) {

            } else if (continuar == 1) {
                System.out.print("De quin tamany vols el tauler: ");
                numero = teclado.nextInt();


                // Creacion del tablero
                char[][] tablero = new char[numero][numero];

                // Llamamos a la funcion rellenaMatriz
                rellenaMatriu(tablero, nada);


                int fila, columna;

                //Este while esta para que sigamos jugando hasta que no haya un ganador o haya un empate.
                while (!winner(tablero, nada) && !taules(tablero, nada)) {

                    //Nos muestra el tablero
                    mostraMatriu(tablero);

                    // Esto nos dira a que jugador le toca.
                    if (jugadorActual == 'O') {
                        System.out.println(ANSI_RED + "Et toca jugador " + jugadorActual + ANSI_RESET);
                    } else {
                        System.out.println(ANSI_BLUE + "Et toca jugador " + jugadorActual + ANSI_RESET);
                    }

                    // Este bucle nos dira que pidamos al usuario una coordenada y hasta que esta no sea correcta
                    // no salga del bucle
                    do {
                        System.out.print("ingrese la fila (0-2): ");
                        fila = teclado.nextInt();
                        System.out.print("ingrese la columna (0-2): ");
                        columna = teclado.nextInt();

                    } while (!posValida(fila, columna, tablero, nada));

                    // Luego actulizaremos la coordenada por la X o O dependiendo el turno pondra una o otra.
                    tablero[fila][columna] = jugadorActual;

                    // Y por último cambiaremos de jugador.
                    jugadorActual = cambiarJugador(jugadorActual);

                }
                mostraMatriu(tablero);
                if (winner(tablero, nada)) {
                    jugadorActual = cambiarJugador(jugadorActual);
                    System.out.println("¡Felicitaciones jugador " + jugadorActual + ", ganaste!");
                } else {
                    System.out.println("¡Empate!");
                }

            } else {
                System.out.println("No has posat ni 0 ni 1");
            }
        } while (continuar != 0);
    }

    public static void rellenaMatriu(char[][] matriu, char simbolo) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matriu[i][j] = simbolo;
            }
        }
    }

    public static void mostraMatriu(char[][] matriu) {
        System.out.println("-------------");
        for (int i = 0; i < 3; i++) {
            System.out.print("| ");
            for (int j = 0; j < 3; j++) {
                System.out.print(matriu[i][j] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    // Esta funcion esta creada para que los datos que introduzca el jugador sea una posicion valida.
    public static boolean posValida(int fila, int columna, char[][] matriu, int simbolo) {
        if (fila < 0 || fila > 2 || columna < 0 || columna > 2) {
            System.out.println("Fila o columna fuera de rango. Intente de nuevo.");
            return false;
        } else if (matriu[fila][columna] != simbolo) {
            System.out.println("Esa casilla ya está ocupada. Intente de nuevo.");
            return false;
        } else {
            return true;
        }
    }

    public static char cambiarJugador(char jugadorActual) {
        if (jugadorActual == 'X') {
            jugadorActual = 'O';
        } else {
            jugadorActual = 'X';
        }
        return jugadorActual;
    }

    public static boolean winner(char[][] matriu, char simbolo) {
        return ganadorFiles(matriu, simbolo) ||
                ganadorColumnes(matriu, simbolo) ||
                ganadorDiagonal(matriu, simbolo);
    }

    public static boolean ganadorFiles(char[][] matriu, char simbolo) {
        for (int i = 0; i < 3; i++) {
            if (matriu[i][0] != simbolo && matriu[i][0] == matriu[i][1] && matriu[i][1] == matriu[i][2]) {
                // He creado un for para que me comprueba en las tres lineas si coinciden el mismo simbolo
                // Este simbolo equivale a jugadorActual
                // Si es correcto retorna true, para que me diga que ha ganado.
                return true;
            }
            // Sino return false y sigue el juego, o acaba en tablas.
        }
        return false;
    }

    public static boolean ganadorColumnes(char[][] matriu, char simbolo) {
        for (int j = 0; j < 3; j++) {
            if (matriu[0][j] != simbolo && matriu[0][j] == matriu[1][j] && matriu[1][j] == matriu[2][j]) {
                // Volvemos a crear un for para que comprueba si en las tres columnas coincide el mismo simbolo
                // Si una de las tres coincide return true.
                return true;
            }
            // Sino return false y sigue el juego, o acaba en tablas.
        }
        return false;
    }

    public static boolean ganadorDiagonal(char[][] matriu, char simbolo) {
        if (matriu[0][0] != simbolo && matriu[0][0] == matriu
                [1][1] && matriu[1][1] == matriu[2][2]) {
            return true;
            // Este if nos comprueba si la diagonal que comineza en el 0 0, luego pasa por el 1 1 y al 2 2
            // Esta la misma ficha
        }
        if (matriu[0][2] != simbolo && matriu[0][2] == matriu[1][1] && matriu[1][1] == matriu[2][0]) {
            return true;
            // Este if nos comprueba la otra diagonal, la que comienza por 0 2 y acaba en 2 0
        }
        // Sino return false y sigue el juego, o acaba en tablas.
        return false;
    }

    public static boolean taules(char[][] matriu, char simbolo) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (matriu[i][j] == simbolo) {
                    return false;
                }
            }
        }
        return true;
    }

    public char[][] getPosition(int number) {
        switch (number) {
            case 1 -> {
                return new char[0][0];
            }
            case 2 -> {
                return new char[0][1];
            }
            case 3 -> {
                return new char[0][2];
            }
            case 4 -> {
                return new char[1][0];
            }
            case 5 -> {
                return new char[1][1];
            }
            case 6 -> {
                return new char[1][2];
            }
            case 7 -> {
                return new char[2][0];
            }
            case 8 -> {
                return new char[2][1];
            }
            case 9 -> {
                return new char[2][2];
            }
            default -> {
                return null;
            }
        }
    }

}

